services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - ecommerce-network
    env_file:
      - .env
    restart: unless-stopped
  worker:
    build:
      context: .
      dockerfile: Dockerfile
    command: ./ecommerce-app worker
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - ecommerce-network
    env_file:
      - .env
    restart: unless-stopped
  postgres:
    image: postgres:15.14-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=secret
      - POSTGRES_DB=ecommerce
    ports:
      - "5432:5432"
    volumes:
      - ecommerce_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ecommerce"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - ecommerce-network
    restart: unless-stopped
  redis:
    image: redis:7.4-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - ecommerce-network
    restart: unless-stopped
  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - ecommerce-network
    restart: unless-stopped
  prometheus:
    image: prom/prometheus:v2.54.1
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - ecommerce-network
    restart: unless-stopped
  grafana:
    image: grafana/grafana:11.2.2
    ports:
      - "3000:3000"
    networks:
      - ecommerce-network
    restart: unless-stopped
volumes:
  ecommerce_postgres_data:
    name: ecommerce_postgres_data
networks:
  ecommerce-network:
    driver: bridge
